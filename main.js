/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ZettelFlowPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  mySetting: "default"
};
var ZettelFlowPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    const ribbonSiblingIconEl = this.addRibbonIcon("move-right", "New Sibling Note", (evt) => {
      new import_obsidian.Notice("Created a new Sibling Note!");
      ZettelFlowHelper.newFile(this.app, true);
    });
    const ribbonChildIconEl = this.addRibbonIcon("split", "New Child Note", (evt) => {
      new import_obsidian.Notice("Created a new Child Note!");
      ZettelFlowHelper.newFile(this.app, false);
    });
    this.addCommand({
      id: "New-sibling-note",
      name: "New Sibling Note",
      editorCallback: (editor, view) => {
        ZettelFlowHelper.newFile(this.app, true);
      }
    });
    this.addCommand({
      id: "New-child-note",
      name: "New Child Note",
      editorCallback: (editor, view) => {
        ZettelFlowHelper.newFile(this.app, false);
      }
    });
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var ZettelFlowHelper = class {
  constructor() {
  }
  static openFile(app, file) {
    const leaf = app.workspace.getLeaf();
    leaf.openFile(file);
  }
  // we applying the stupid method here, just create new Id until it's unique
  // expect to check in current folder
  static newName(id, files, bSibling) {
    let zettelId = new ZettelID(void 0, id);
    let nextId = "";
    if (bSibling)
      nextId = zettelId.genNextSiblingId();
    else
      nextId = zettelId.genNextChildId();
    let existingFile;
    while (true) {
      if (!files)
        break;
      existingFile = files.find((file) => file.basename === nextId);
      if (!existingFile)
        break;
      zettelId = new ZettelID(void 0, nextId);
      nextId = zettelId.genNextSiblingId();
    }
    return nextId;
  }
  static newFile(app, bSibling) {
    var _a, _b;
    const activeFile = app.workspace.getActiveFile();
    if (activeFile) {
      const fileName = activeFile.basename;
      console.log(`Current file name: ${fileName}`);
      let newSiblingName = ZettelFlowHelper.newName(fileName, activeFile.parent ? (_a = activeFile.parent) == null ? void 0 : _a.children : app.vault.getMarkdownFiles(), bSibling);
      console.log(`New ${bSibling ? "Sibling" : "Child"} ID: ${newSiblingName}`);
      let newFileName = "/" + newSiblingName + ".md";
      app.vault.create(((_b = activeFile.parent) == null ? void 0 : _b.path) + newFileName, "").then((file) => {
        console.log(`New file "${newFileName}" created successfully.`);
        ZettelFlowHelper.openFile(app, file);
      }).catch((error) => {
        console.error("Error creating the new file:", error.message);
      });
    } else {
      console.log("No active file.");
    }
  }
};
var ZettelID = class {
  constructor(zettelId, id) {
    this.originID = "";
    this.seperatedID = [];
    if (id) {
      this.originID = id;
      this.seperatingID();
    }
    if (zettelId) {
      this.originID = zettelId.originID;
      this.seperatedID = [...zettelId.seperatedID];
    }
  }
  seperatingID() {
    if (!this.originID)
      return;
    const result = this.originID.match(/(\d+|\D+)/g);
    if (result)
      this.seperatedID = result;
  }
  genNextSiblingId() {
    return ZettelID.genNextSiblingId(this);
  }
  genNextChildId() {
    return ZettelID.genNextChildId(this);
  }
  static genNextChildId(zettelId) {
    if (!zettelId.originID)
      return "";
    let newId = new ZettelID(zettelId);
    const lastVal = newId.seperatedID.last();
    let newVal = "";
    if (lastVal) {
      let result = parseInt(lastVal);
      if (isNaN(result)) {
        newVal = "1";
      } else {
        newVal = "a";
      }
      newId.seperatedID.push(newVal);
    }
    return newId.seperatedID.join("");
  }
  static genNextSiblingId(zettelId) {
    if (!zettelId.originID)
      return "";
    let newId = new ZettelID(zettelId);
    const lastVal = newId.seperatedID.last();
    let newVal = "";
    if (lastVal) {
      let result = parseInt(lastVal);
      if (isNaN(result)) {
        newVal = ZettelID.increasingLetters(lastVal);
      } else {
        newVal = (result + 1).toString(10);
      }
      newId.seperatedID.pop();
      newId.seperatedID.push(newVal);
    }
    return newId.seperatedID.join("");
  }
  static increasingDigit(digit) {
    let result = parseInt(digit);
    return (result + 1).toString(10);
  }
  // may reference from https://stackoverflow.com/a/12504061
  static increasingLetters(letters) {
    let result = letters;
    let lastChar = result.charAt(letters.length - 1);
    if (lastChar === "z")
      return result + "a";
    else {
      return result.replace(/\w$/i, String.fromCharCode(lastChar.charCodeAt(0) + 1));
    }
  }
};
//# sourceMappingURL=data:application/json;base64,
